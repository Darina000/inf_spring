1. 1) Переносимость, поведение одинаковое на каждой системе
   2) Баланс между компактностью и эффективностью
   3) Связующее звено между компонентами какой-то системы
   
2. Для обеспечения обновлённой версией проекта для всех участников/для того, 
чтоб следить за изменением проекта и видеть конкретно где и какие изменения были сделаны.

3. Создание репозитория git init, git add - добавление существующих файлов, клонирование репозитория git clone,
внесение изменений git commit, отправка изменений git push, получение изменений git pull, discard отмена локальных изменений,
что ещё не зафиксированы в локальном репозитории, reset - откат, revert git-отмена комита

4. Когда всегда нужна рабочая версия(master), но нужно сделать какие-то изменения. 
Так можно в отдельной ветке сделать всё, проверить на ошибки, а потом уже обновить продакшн версию уже зная, что ничего не сломается.

5. интервалы времени – duration; моменты времени – time_point; таймеры – clock


+ в задаче было: 

Git Merge - Слияние принимает содержимое ветки источника и объединяет их с целевой веткой. В этом процессе изменяется только целевая ветка. 
История исходных веток остается неизменной. Git Rebase - Rebase сжимает все изменения в один «патч». Затем он интегрирует патч в целевую ветку.
В отличие от merge, rebase перезаписывает историю, потому что она передает завершенную работу из одной ветки в другую. В процессе устраняется нежелательная история.
