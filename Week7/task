1.
Контекстное переключение - процесс прекращения выполнения процессором одной задачи с сохранением всей необходимой информации и состояния для продолжения с этого же места, и восстановления состояния задачи, к выполнению которой переходит процессор (исполнитель один).

2. 
Первый способ распараллелить приложение — разбить его на несколько однопоточных одновременно исполняемых процессов. Недостаток такой организации связи между процессами в его сложности, медленности, затратно. Плюс - безопасность.

Второй — запуск нескольких потоков в одном процессе. Потоки можно считать облегченными процессами — каждый поток работает независимо от всех остальных, и все потоки могут выполнять разные последовательности команд. У них общее адресное пространство. Особенности - опасно, сложно, быстро, незатратно. 

3.
На производительность влияет количество исполнителей, конкуренция за данные, ложное разделение(строки кэша), локальность данных, а также безопасность относительно исключений, масштабируемость и закон Сандала

4.
Если есть задача, результат нужен позже, а есть другие дела, но std::thread не позволяет вернуть результат, но у нас есть future.
Future - это контейнер для значения типа T cо следующей семантикой: сейчас значение в контейнере может отсутствовать, но когда-то в будущем оно появится. С помощью этого контейнера мы можем связывать те значения, что появятся в будущем, с теми, что есть в настоящем моменте.
Используется async (асинхронная задача), packed_task - задача, std::promise - обещание 
Функция Then — это то, что позволяет делать комбинации. Я могу скомбинировать мое обещание в будущем получить значение t и желание применить трансформацию f. Тогда я получу обещание в настоящем моменте времени, о том, что в будущем появится значение r.

5. 
Важно учитывать объем вычислений, при простых операциях ожидание основной памяти очень долгое и последовательная версия может обгонять параллельную (надо проводить замеры времени работы)


